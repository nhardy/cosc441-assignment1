COSC441 Assignment 1
--------------------

Nathan Hardy (%STUDENT_ID%)

Timings
=======

DNF: Did Not Finish within 20 minutes

version	N	CPU time	real time	correct
-------|-------|---------------|---------------|-------|
single	N/A	0m28.144	0m28.146	yes
thread	1	0m27.992	0m27.997	yes
thread	2	1m02.396	0m32.376	no
thread	3	1m23.600	0m31.672	no
thread	4	1m51.548	0m32.123	no
thread	5	3m31.180	0m44.483	no
thread	6	3m07.084	0m32.570	no
thread	7	4m20.144	0m38.451	no
thread	8	3m41.608	0m32.184	no
mutex	1	3m54.008	2m54.011	yes
mutex	2	33m59.436	17m02.167	yes
mutex	3	DNF		DNF		DNF
mutex	4	DNF		DNF		DNF
mutex	5	DNF		DNF		DNF
mutex	6	DNF		DNF		DNF
mutex	7	DNF		DNF		DNF
mutex	8	DNF		DNF		DNF
atomic	1	1m20.936	1m21.005	yes
atomic	2	5m48.392	3m01.653	yes
atomic	3	9m47.896	3m28.594	yes
atomic	4	14m13.940	3m43.717	yes
atomic	5	19m03.560	3m52.379	yes
atomic	6	20m22.240	3m29.411	yes
atomic	7	22m55.364	3m24.177	yes
atomic	8	23m34.580	3m11.081	yes

Commentary
==========

Single:
The single-threaded program variant completed in just over 28 seconds with the correct result, setting a useful benchmark for measuring other runs against.

Thread:
The threaded variant running with a single thread achieved a very similar result, completing in just under 28 seconds with the correct answer. It is somewhat surprising that the running time was slightly less, especially considering compiler optimisations on the `total` variable were disabled with volatile.
With N > 1, this variant no longer calculates the correct result, likely a result of interleaved memory updates from different threads. CPU time increases, roughly proportional to N (with the exceptions of N=5 and N=7, likely anomalies of background tasks run by the operating system). Real time seems to remain roughly the same for 2<=N<=8, but with higher N, this number likely would increase as N exceeded the number of hyperthreads available on the test machine. At N=5 and N=7, an anomalous time is resultant. It is somewhat surprising that the time does not reduce here, given work is being split amongst N threads, until we consider that the speed of memory is the limiting factor.

Mutex:
The mutex variant running with a single thread completes correctly in just under 3 minutes. This indicates that the process of locking an unlocking a mutex is an expensive operation.
With N = 2, the program takes significantly longer, completing correctly in just over 17 minutes. CPU time here was just under 34 minutes. These measurements, which are more than double that of when N =1, suggest that interacting with a highly contested shared resource, in this case locking and unlocking the mutex, is extremely expensive relatively speaking.
For N > 2, the program did not complete within 20 minutes, so this has been indicated with DNF (Did Not Finish) in the table. With a limited set of measurements, it is difficult to estimate how a greater number of threads would affect the running time (in terms of Big-O notation), but the data points present suggest a progression worse than linear.

Atomic:
The atomic variant running with a single thread completes correctly in just over 1 minute and 21 seconds. This indicates atomic operations are less expensive than use of a mutex, but are still a performance hit.
For 1 < N <= 8, the program's real running time does not seem to trend upward and maintains a correct result. This would likely change for N > 8, where the test machine's hyperthreading capacity is exceeded. CPU time increases, roughly proportional to N.

Overall observations:
This assignment is an extreme example designed to show where concurrency is actually detrimental to a program's performance when its operation relies heavily on contested shared memory resources.
For a concurrent program to operate effectively, it should avoid shared memory where possible and instead work on discrete sub-problems which are later recombined, minimising the number of shared memory interactions. In this particular instance, each thread could have created a separate total which was combined at the the conclusion.
